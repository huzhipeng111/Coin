package com.huzhipeng.coin.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_RECORD".
*/
public class AlarmRecordDao extends AbstractDao<AlarmRecord, Long> {

    public static final String TABLENAME = "ALARM_RECORD";

    /**
     * Properties of entity AlarmRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Symbol = new Property(1, String.class, "symbol", false, "SYMBOL");
        public final static Property AlarmTime = new Property(2, long.class, "alarmTime", false, "ALARM_TIME");
        public final static Property AlarmPrice = new Property(3, String.class, "alarmPrice", false, "ALARM_PRICE");
        public final static Property Gain = new Property(4, String.class, "gain", false, "GAIN");
        public final static Property Gain24 = new Property(5, String.class, "gain24", false, "GAIN24");
        public final static Property AlarmType = new Property(6, int.class, "alarmType", false, "ALARM_TYPE");
        public final static Property LastTradeVulm = new Property(7, int.class, "lastTradeVulm", false, "LAST_TRADE_VULM");
        public final static Property FiveSecondStandardDeviation = new Property(8, int.class, "fiveSecondStandardDeviation", false, "FIVE_SECOND_STANDARD_DEVIATION");
        public final static Property Index = new Property(9, int.class, "index", false, "INDEX");
        public final static Property FiveSecondsAverageTradingVolume = new Property(10, int.class, "fiveSecondsAverageTradingVolume", false, "FIVE_SECONDS_AVERAGE_TRADING_VOLUME");
        public final static Property GainTimeJianju = new Property(11, int.class, "gainTimeJianju", false, "GAIN_TIME_JIANJU");
        public final static Property Yimiaojiaoyiliang = new Property(12, long.class, "yimiaojiaoyiliang", false, "YIMIAOJIAOYILIANG");
    }


    public AlarmRecordDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYMBOL\" TEXT," + // 1: symbol
                "\"ALARM_TIME\" INTEGER NOT NULL ," + // 2: alarmTime
                "\"ALARM_PRICE\" TEXT," + // 3: alarmPrice
                "\"GAIN\" TEXT," + // 4: gain
                "\"GAIN24\" TEXT," + // 5: gain24
                "\"ALARM_TYPE\" INTEGER NOT NULL ," + // 6: alarmType
                "\"LAST_TRADE_VULM\" INTEGER NOT NULL ," + // 7: lastTradeVulm
                "\"FIVE_SECOND_STANDARD_DEVIATION\" INTEGER NOT NULL ," + // 8: fiveSecondStandardDeviation
                "\"INDEX\" INTEGER NOT NULL ," + // 9: index
                "\"FIVE_SECONDS_AVERAGE_TRADING_VOLUME\" INTEGER NOT NULL ," + // 10: fiveSecondsAverageTradingVolume
                "\"GAIN_TIME_JIANJU\" INTEGER NOT NULL ," + // 11: gainTimeJianju
                "\"YIMIAOJIAOYILIANG\" INTEGER NOT NULL );"); // 12: yimiaojiaoyiliang
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(2, symbol);
        }
        stmt.bindLong(3, entity.getAlarmTime());
 
        String alarmPrice = entity.getAlarmPrice();
        if (alarmPrice != null) {
            stmt.bindString(4, alarmPrice);
        }
 
        String gain = entity.getGain();
        if (gain != null) {
            stmt.bindString(5, gain);
        }
 
        String gain24 = entity.getGain24();
        if (gain24 != null) {
            stmt.bindString(6, gain24);
        }
        stmt.bindLong(7, entity.getAlarmType());
        stmt.bindLong(8, entity.getLastTradeVulm());
        stmt.bindLong(9, entity.getFiveSecondStandardDeviation());
        stmt.bindLong(10, entity.getIndex());
        stmt.bindLong(11, entity.getFiveSecondsAverageTradingVolume());
        stmt.bindLong(12, entity.getGainTimeJianju());
        stmt.bindLong(13, entity.getYimiaojiaoyiliang());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(2, symbol);
        }
        stmt.bindLong(3, entity.getAlarmTime());
 
        String alarmPrice = entity.getAlarmPrice();
        if (alarmPrice != null) {
            stmt.bindString(4, alarmPrice);
        }
 
        String gain = entity.getGain();
        if (gain != null) {
            stmt.bindString(5, gain);
        }
 
        String gain24 = entity.getGain24();
        if (gain24 != null) {
            stmt.bindString(6, gain24);
        }
        stmt.bindLong(7, entity.getAlarmType());
        stmt.bindLong(8, entity.getLastTradeVulm());
        stmt.bindLong(9, entity.getFiveSecondStandardDeviation());
        stmt.bindLong(10, entity.getIndex());
        stmt.bindLong(11, entity.getFiveSecondsAverageTradingVolume());
        stmt.bindLong(12, entity.getGainTimeJianju());
        stmt.bindLong(13, entity.getYimiaojiaoyiliang());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlarmRecord readEntity(Cursor cursor, int offset) {
        AlarmRecord entity = new AlarmRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // symbol
            cursor.getLong(offset + 2), // alarmTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alarmPrice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gain
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gain24
            cursor.getInt(offset + 6), // alarmType
            cursor.getInt(offset + 7), // lastTradeVulm
            cursor.getInt(offset + 8), // fiveSecondStandardDeviation
            cursor.getInt(offset + 9), // index
            cursor.getInt(offset + 10), // fiveSecondsAverageTradingVolume
            cursor.getInt(offset + 11), // gainTimeJianju
            cursor.getLong(offset + 12) // yimiaojiaoyiliang
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSymbol(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlarmTime(cursor.getLong(offset + 2));
        entity.setAlarmPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGain(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGain24(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlarmType(cursor.getInt(offset + 6));
        entity.setLastTradeVulm(cursor.getInt(offset + 7));
        entity.setFiveSecondStandardDeviation(cursor.getInt(offset + 8));
        entity.setIndex(cursor.getInt(offset + 9));
        entity.setFiveSecondsAverageTradingVolume(cursor.getInt(offset + 10));
        entity.setGainTimeJianju(cursor.getInt(offset + 11));
        entity.setYimiaojiaoyiliang(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlarmRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlarmRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
